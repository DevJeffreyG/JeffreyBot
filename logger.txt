bot.on("channelCreate", async channel => {
  // Canal creado
  let type;
  let tShow;
  if (channel.type == "dm") return;
  let logC = channel.guild.channels.cache.find(x => x.id === logChannel);

  const entry = await channel.guild
    .fetchAuditLogs({ type: "CHANNEL_CREATE" })
    .then(audit => audit.entries.first());
  let user = entry.executor.id;

  let member = channel.guild.members.cahe.get(user);

  if (channel.type === "text") {
    type = "Texto";
    tShow = "Canal de texto creado.";
  } else if (channel.type === "voice") {
    type = "Voz";
    tShow = "Canal de voz creado.";
  } else {
    type = "Categoría";
    tShow = "Categoría creada";
  }

  let embed = new Discord.MessageEmbed()
    .setAuthor(`| ${tShow}`, channel.guild.iconURL())
    .setDescription(
      `**—** Nombre: ${channel} (**${channel.name}**)
**—** Tipo: ${type}
**—** ID: \`${channel.id}\``
    )
    .setFooter(`Creado por ${member.user.tag}`, member.user.displayAvatarURL())
    .setTimestamp()
    .setColor(Colores.verde);

  return logC.send(embed);
});

bot.on("channelDelete", async channel => {
  // Canal eliminado
  let type;
  let tShow;
  let logC = channel.guild.channels.cache.find(x => x.id === logChannel);

  const entry = await channel.guild
    .fetchAuditLogs({ type: "CHANNEL_DELETE" })
    .then(audit => audit.entries.first());
  let user = entry.executor.id;

  let member = channel.guild.members.cahe.get(user);

  if (channel.type === "text") {
    type = "Texto";
    tShow = "Canal de texto eliminado.";
  } else if (channel.type === "voice") {
    type = "Voz";
    tShow = "Canal de voz eliminado.";
  } else {
    type = "Categoría";
    tShow = "Categoría elminada";
  }

  let embed = new Discord.MessageEmbed()
    .setAuthor(`| ${tShow}`, channel.guild.iconURL())
    .setDescription(
      `**—** Nombre: #**${channel.name}**
**—** Tipo: ${type}
**—** ID: \`${channel.id}\``
    )
    .setFooter(`Eliminado por ${member.user.tag}`, member.user.displayAvatarURL())
    .setTimestamp()
    .setColor(Colores.verde);

  return logC.send(embed);
});

bot.on("channelUpdate", async (oldChannel, newChannel) => {
  // Canal actualizado

  const { Permissions } = require("discord.js");

  let logC = newChannel.guild.channels.cache.find(x => x.id === logChannel);

  const entry = await newChannel.guild
    .fetchAuditLogs()
    .then(audit => audit.entries.first());
  let user = entry.executor.id;
  let member = newChannel.guild.members.cahe.get(user);
  let cambios = entry.changes[0];
  let eKey = cambios.key;
  let extra = entry.extra;

  if (entry.action === "CHANNEL_OVERWRITE_UPDATE") {
    // BUENO
    let overType;
    let overwriteRole;
    if (!extra.user) {
      overType = "role";
      overwriteRole = newChannel.guild.roles.cache.find(x => x.id === extra.id);
    } else {
      overType = "member";
      overwriteRole = newChannel.guild.members.cahe.get(extra.user.id);
    }

    let embed = new Discord.MessageEmbed()
      .setAuthor(`| Canal actualizado (Permisos)`, newChannel.guild.iconURL())
      .setDescription(
        `**—** Cambios a ${overwriteRole} en ${newChannel}
**—** ID: \`${newChannel.id}\``
      )
      .setFooter(
        `Actualizado por ${member.user.tag}`,
        member.user.displayAvatarURL()
      )
      .setTimestamp()
      .setColor(Colores.verde);

    return logC.send(embed);
  }

  if (entry.action === "CHANNEL_OVERWRITE_DELETE") {
    // BUENO, NUEVO
    let embed = new Discord.MessageEmbed()
      .setAuthor(`| Canal actualizado (Permisos)`, newChannel.guild.iconURL())
      .setDescription(
        `**—** Permisos eliminados en ${newChannel}
**—** ID: \`${newChannel.id}\``
      )
      .setFooter(
        `Actualizado por ${member.user.tag}`,
        member.user.displayAvatarURL()
      )
      .setTimestamp()
      .setColor(Colores.verde);

    return logC.send(embed);
  }

  if (entry.action === "CHANNEL_OVERWRITE_CREATE") {
    // BUENO, NUEVO
    let embed = new Discord.MessageEmbed()
      .setAuthor(`| Canal actualizado (Permisos)`, newChannel.guild.iconURL())
      .setDescription(
        `**—** Permisos creados en ${newChannel}
**—** ID: \`${newChannel.id}\``
      )
      .setFooter(
        `Actualizado por ${member.user.tag}`,
        member.user.displayAvatarURL()
      )
      .setTimestamp()
      .setColor(Colores.verde);

    return logC.send(embed);
  }

  if (eKey === "name") {
    // Bien
    let embed = new Discord.MessageEmbed()
      .setAuthor(`| Canal actualizado (Nombre)`, newChannel.guild.iconURL())
      .setDescription(
        `**—** Nombre anterior: \`${cambios.old}\`
**—** Nombre actual: \`${cambios.new}\`
**—** ID: \`${newChannel.id}\``
      )
      .setFooter(
        `Actualizado por ${member.user.tag}`,
        member.user.displayAvatarURL()
      )
      .setTimestamp()
      .setColor(Colores.verde);

    return logC.send(embed);
  } else if (eKey === "topic") {
    // BUENO, CREADO
    let embed = new Discord.MessageEmbed()
      .setAuthor(`| Canal actualizado (Tema)`, newChannel.guild.iconURL())
      .setDescription(
        `**—** Tema anterior: \`${cambios.old}\`
**—** Tema actual: \`${cambios.new}\`
**—** ID: \`${newChannel.id}\``
      )
      .setFooter(
        `Actualizado por ${member.user.tag}`,
        member.user.displayAvatarURL()
      )
      .setTimestamp()
      .setColor(Colores.verde);

    return logC.send(embed);
  } else if (eKey === "nsfw") {
    // BUENO, CREADO
    let antes;
    let ahora;

    if (cambios.old === true) {
      antes = "Sí";
    } else {
      antes = "No";
    }

    if (cambios.new === true) {
      ahora = "Sí";
    } else {
      ahora = "No";
    }

    let embed = new Discord.MessageEmbed()
      .setAuthor(`| Canal actualizado (NSFW)`, newChannel.guild.iconURL())
      .setDescription(
        `**—** Era NSFW: \`${antes}\`.
**—** Es NSFW: \`${ahora}\`.
**—** ID: \`${newChannel.id}\``
      )
      .setFooter(
        `Actualizado por ${member.user.tag}`,
        member.user.displayAvatarURL()
      )
      .setTimestamp()
      .setColor(Colores.verde);

    return logC.send(embed);
  } else if (eKey === "rate_limit_per_user") {
    // BUENO, CREADO

    var to_human = require("seconds-to-human");
    let msAn = ms(`${cambios.old}s`) / 1000;
    let msAh = ms(`${cambios.new}s`) / 1000;

    let msAntes = to_human(`${msAn}`);
    let msAhora = to_human(`${msAh}`);

    if (msAh === 0) {
      msAhora = "Deshabilitado";
    }

    if (msAn === 0) {
      msAntes = "Deshabilitado";
    }

    let embed = new Discord.MessageEmbed()
      .setAuthor(`| Canal actualizado (Slowmode)`, newChannel.guild.iconURL())
      .setDescription(
        `**—** Antes: \`${msAntes}\`.
**—** Ahora: \`${msAhora}\`.
**—** ID: \`${newChannel.id}\``
      )
      .setFooter(
        `Actualizado por ${member.user.tag}`,
        member.user.displayAvatarURL()
      )
      .setTimestamp()
      .setColor(Colores.verde);

    return logC.send(embed);
  }
});

bot.on("messageUpdate", async (oldMessage, newMessage) => {
  if (oldMessage.channel.type == "dm") return;
  let logC = newMessage.guild.channels.cache.find(x => x.id === logChannel);
  let member = newMessage.member;

  if (!member) return;

  if (newMessage.author.bot) return;
  if (newMessage.channel.type === "dm") return;

  let embed = new Discord.MessageEmbed()
    .setAuthor(`| Mensaje editado`, newMessage.guild.iconURL())
    .setDescription(
      `**—** Cambios a [un mensaje](${newMessage.url}) en ${newMessage.channel}
**—** Mensaje viejo: \`${oldMessage.content}\`.
**—** Mensaje nuevo: \`${newMessage.content}\`.
**—** ID: \`${newMessage.id}\`.`
    )
    .setFooter(
      `Actualizado por ${member.user.tag}`,
      member.user.displayAvatarURL()
    )
    .setTimestamp()
    .setColor(Colores.verde);

  return logC.send(embed);
});

bot.on("messageDelete", async message => {
  if (message.channel.type === "dm") return;
  if (message.author.bot) return;
  let logC = message.guild.channels.cache.find(x => x.id === logChannel);
  let member = message.member;

  const entry = await message.guild
    .fetchAuditLogs({ type: "MESSAGE_DELETE" })
    .then(audit => audit.entries.first());
  let user = "";
  let pfp = "";
  if (
    entry.extra.channel.id === message.channel.id &&
    entry.target.id === message.author.id &&
    entry.createdTimestamp > Date.now() - 5000 &&
    entry.extra.count >= 1
  ) {
    user = entry.executor.tag;
    pfp = entry.executor.displayAvatarURL();
  } else {
    user = message.author.tag;
    pfp = message.author.displayAvatarURL();
  }

  if (member.user.bot) return;
  if (entry.executor.bot) return;

  if (message.channel.type === "dm") return;

  let embed = new Discord.MessageEmbed()
    .setAuthor(`| Mensaje eliminado`, message.guild.iconURL())
    .setDescription(
      `**—** ${user} eliminó un mensaje en ${message.channel}
**—** Mensaje eliminado: \`${message.content}\`.`
    )
    .setFooter(`Eliminado por ${user}`, pfp)
    .setTimestamp()
    .setColor(Colores.verde);

  let fastEmbed = new Discord.MessageEmbed()
    .setAuthor(`| Mensaje eliminado muy rápido`, message.guild.iconURL())
    .setDescription(`**—** Contenido: \`${message.content}\`.`)
    .setFooter(`Eliminado por ${entry.executor.tag}`, pfp)
    .setTimestamp()
    .setColor(Colores.verde);

  logC.send(embed);

  /*let diferencia = now - created;
  
  if(diferencia => 60000){
    return message.channel.send(fastEmbed);
  }*/
});